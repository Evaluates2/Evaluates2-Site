{"version":3,"sources":["webpack:///./src/components/img-components/code-screenshots/fizzbuzzify-string-screenshot-js.img.js","webpack:///./src/components/img-components/code-screenshots/fizzbuzzify-string-screenshot-ts.img.js","webpack:///./src/components/img-components/code-screenshots/fizzbuzzify-string-screenshot-clj.img.js","webpack:///./src/components/img-components/code-screenshots/go-fizzbuzzified-string-screenshot.img.js","webpack:///./src/components/img-components/code-screenshots/rust-fizzbuzzifies-strings-screenshot.img.js","webpack:///./src/components/img-components/code-screenshots/java-fizzbuzzified-string-screenshot.img.js","webpack:///./src/components/img-components/code-screenshots/ruby-fizzbuzzifies-strings-screenshot.img.js","webpack:///./src/components/img-components/code-screenshots/python-fizzbuzzified-string-screenshot.img.js","webpack:///./src/pages/engineering.js","webpack:///./src/components/img-components/staff-augmentation.img.js","webpack:///./src/components/img-components/resource-efficiency.img.js","webpack:///./src/components/generic-reusable-components/change-gears-block.js","webpack:///./src/components/img-components/technical-audits.img.js","webpack:///./src/components/generic-reusable-components/stackable-columns-container.js","webpack:///./src/components/generic-reusable-components/ready-to-get-started-section.js","webpack:///./src/components/generic-reusable-components/key-principle-header.js","webpack:///./src/components/generic-reusable-components/key-principles-info-block.js"],"names":["JsFizzbuzzifiedStringImage","query","render","data","fluid","placeholderImage","childImageSharp","TypeScriptFizzbuzzifiedStringImage","ClojureFizzbuzzifiedStringImage","GoFizzbuzzifiedStringImage","RustFizzbuzzifiedStringImage","JavaFizzbuzzifiedStringImage","RubyFizzbuzzifiedStringImage","PythonFizzbuzzifiedStringImage","EngineeringPageContainer","SectionHeroEngPage","WorkTogetherSection","LanguagesHeaderSection","LanguagePickerGrid","LanguageOptionsColumn","LanguageInfoSection","LanguageIdeScreenshotContainer","BestStackForYouSection","BuildYourOwnStackSection","EngineeringStackableColumn","languageDescriptionsMap","JavaScript","TypeScript","Rust","Swift","Kotlin","Python","Scala","Haskell","Java","keyPrinciplesData","header","paragraph1","paragraph2","EngineeringPage","useState","lastLanguageClicked","setLastLanguageClicked","lastLanguageHovered","setLastLanguageHovered","languageSelected","setLanguageSelected","handleLanguageOptionHoverOver","newLanguageChoice","handleLanguageOptionClick","event","stopPropagation","handleLanguageOptionHoverOut","Global","pageTitle","path","description","onClick","id","className","onMouseOver","onMouseOut","headerText","linkText","linkTo","to","StaffAugmentationImage","ResourceEfficiencyImage","StyledChangeGearsBlock","RainbowBlock","ChangeGearsBlock","TechnicalAuditsImage","StackableColumnsContainer","ReadyToGetStartedSection","StyledPrinciplesHeader","KeyPrinciplesHeader","StyledPrinciplesInfoBlock","KeyPrinciplesInfoBlock"],"mappings":"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","file":"component---src-pages-engineering-js-fdd02d678b0042f9749d.js","sourcesContent":["import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.app/gatsby-image\n * - `StaticQuery`: https://gatsby.app/staticquery\n */\n\nconst JsFizzbuzzifiedStringImage = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(relativePath: { eq: \"code-screenshots/fizzbuzzify-string-screenshot-js.png\" }) {\n          childImageSharp {\n            fluid(maxWidth: 2000) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Img fluid={data.placeholderImage.childImageSharp.fluid} />}\n  />\n);\nexport default JsFizzbuzzifiedStringImage;\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.app/gatsby-image\n * - `StaticQuery`: https://gatsby.app/staticquery\n */\n\nconst TypeScriptFizzbuzzifiedStringImage = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(relativePath: { eq: \"code-screenshots/fizzbuzzify-string-screenshot-ts.png\" }) {\n          childImageSharp {\n            fluid(maxWidth: 2000) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Img fluid={data.placeholderImage.childImageSharp.fluid} />}\n  />\n);\nexport default TypeScriptFizzbuzzifiedStringImage;\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.app/gatsby-image\n * - `StaticQuery`: https://gatsby.app/staticquery\n */\n\nconst ClojureFizzbuzzifiedStringImage = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(relativePath: { eq: \"code-screenshots/fizzbuzzify-string-screenshot-clj.png\" }) {\n          childImageSharp {\n            fluid(maxWidth: 2000) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Img fluid={data.placeholderImage.childImageSharp.fluid} />}\n  />\n);\nexport default ClojureFizzbuzzifiedStringImage;\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.app/gatsby-image\n * - `StaticQuery`: https://gatsby.app/staticquery\n */\n\nconst GoFizzbuzzifiedStringImage = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(relativePath: { eq: \"code-screenshots/go-fizzbuzzified-string-screenshot.png\" }) {\n          childImageSharp {\n            fluid(maxWidth: 2000) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Img fluid={data.placeholderImage.childImageSharp.fluid} />}\n  />\n);\nexport default GoFizzbuzzifiedStringImage;\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.app/gatsby-image\n * - `StaticQuery`: https://gatsby.app/staticquery\n */\n\nconst RustFizzbuzzifiedStringImage = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(relativePath: { eq: \"code-screenshots/rust-fizzbuzzified-string-screenshot.png\" }) {\n          childImageSharp {\n            fluid(maxWidth: 2000) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Img fluid={data.placeholderImage.childImageSharp.fluid} />}\n  />\n);\nexport default RustFizzbuzzifiedStringImage;\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.app/gatsby-image\n * - `StaticQuery`: https://gatsby.app/staticquery\n */\n\nconst JavaFizzbuzzifiedStringImage = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(relativePath: { eq: \"code-screenshots/java-fizzbuzzified-string-screenshot.png\" }) {\n          childImageSharp {\n            fluid(maxWidth: 2000) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Img fluid={data.placeholderImage.childImageSharp.fluid} />}\n  />\n);\nexport default JavaFizzbuzzifiedStringImage;\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.app/gatsby-image\n * - `StaticQuery`: https://gatsby.app/staticquery\n */\n\nconst RubyFizzbuzzifiedStringImage = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(relativePath: { eq: \"code-screenshots/ruby-fizzbuzzified-string-screenshot.png\" }) {\n          childImageSharp {\n            fluid(maxWidth: 2000) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Img fluid={data.placeholderImage.childImageSharp.fluid} />}\n  />\n);\nexport default RubyFizzbuzzifiedStringImage;\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.app/gatsby-image\n * - `StaticQuery`: https://gatsby.app/staticquery\n */\n\nconst PythonFizzbuzzifiedStringImage = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(relativePath: { eq: \"code-screenshots/python3-fizzbuzzified-string-screenshot.png\" }) {\n          childImageSharp {\n            fluid(maxWidth: 2000) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Img fluid={data.placeholderImage.childImageSharp.fluid} />}\n  />\n);\nexport default PythonFizzbuzzifiedStringImage;\n","import React, { useState } from 'react';\nimport { Link } from 'gatsby';\n\nimport styled from '@emotion/styled';\nimport Global from \"../components/Global\"\nimport Layout from '../components/layout';\nimport TechnicalAuditsImage from '../components/img-components/technical-audits.img.js';\nimport ResourceEfficiencyImage from '../components/img-components/resource-efficiency.img';\nimport StaffAugmentationImage from '../components/img-components/staff-augmentation.img';\nimport KeyPrinciplesHeader from './../components/generic-reusable-components/key-principle-header';\nimport KeyPrinciplesInfoBlock from './../components/generic-reusable-components/key-principles-info-block';\nimport ChangeGearsBlock from './../components/generic-reusable-components/change-gears-block';\nimport JoinOurTeamCornerBtn from './../components/generic-reusable-components/join-our-team-corner-btn';\nimport StackableColumnsContainer from '../components/generic-reusable-components/stackable-columns-container';\nimport ReadyToGetStartedSection from '../components/generic-reusable-components/ready-to-get-started-section';\nimport JsFizzbuzzifiedStringImage from '../components/img-components/code-screenshots/fizzbuzzify-string-screenshot-js.img';\nimport TypeScriptFizzbuzzifiedStringImage from '../components/img-components/code-screenshots/fizzbuzzify-string-screenshot-ts.img';\nimport ClojureFizzbuzzifiedStringImage from '../components/img-components/code-screenshots/fizzbuzzify-string-screenshot-clj.img';\nimport GoFizzbuzzifiedStringImage from '../components/img-components/code-screenshots/go-fizzbuzzified-string-screenshot.img';\nimport RustFizzbuzzifiedStringImage from '../components/img-components/code-screenshots/rust-fizzbuzzifies-strings-screenshot.img';\nimport JavaFizzbuzzifiedStringImage from '../components/img-components/code-screenshots/java-fizzbuzzified-string-screenshot.img';\nimport RubyFizzbuzzifiedStringImage from '../components/img-components/code-screenshots/ruby-fizzbuzzifies-strings-screenshot.img';\nimport PythonFizzbuzzifiedStringImage from '../components/img-components/code-screenshots/python-fizzbuzzified-string-screenshot.img';\n\nconst EngineeringPageContainer = styled.div`\n  font-family: 'e2-Raleway-Black';\n  background-color: #000032;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n  h1 {\n    font-family: 'e2-Raleway-Black';\n    font-size: 44px;\n    max-width: 95vw;\n    line-height: 140px;\n    text-align: center;\n    letter-spacing: 4px;\n  }\n  p {\n    font-size: 18px;\n    line-height: 32px;\n    letter-spacing: 2px;\n    font-family: 'e2-Raleway';\n  }\n`;\n\nconst SectionHeroEngPage = styled.div`\n  line-height: 85px;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  h1#hero-h-eng {\n    font-family: 'e2-Raleway-Extra-Bold';\n    text-align: center;\n    margin-top: calc(160px + 10vw);\n    letter-spacing: 0.5vw;\n    line-height: calc(21px + 9vw);\n    font-size: calc(16px + 8vw);\n  }\n  p {\n    font-family: 'e2-Raleway';\n    text-align: center;\n    padding: calc(15px + 2vw) calc(10px + 1vw); \n    opacity: 0.8;\n    font-size: calc(7px + 3vw);\n    line-height: calc(15px + 6vw);\n    margin: calc(7px + 10vw) calc(7px + 2vw) calc(20px + 6vw);;\n\n  }\n\n`;\n\nconst WorkTogetherSection = styled.div`\n  padding: 5px;\n  background-color: #000032;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  min-height: 400px;\n  margin: 25vw 2vw;\n\n  h1 {\n    font-family: 'e2-Raleway-Extra-Bold';\n    text-align: center;\n    margin-top: calc(160px + 10vw);\n    letter-spacing: 0.5vw;\n    line-height: calc(30px + 9vw);\n    font-size: calc(16px + 8vw);\n  }\n  p {\n    font-family: 'e2-Raleway';\n    text-align: center;\n    padding: calc(15px + 2vw) calc(10px + 1vw); \n    opacity: 0.8;\n    font-size: calc(2px + 3vw);\n    line-height: calc(15px + 6vw);\n    margin: calc(7px + 4vw) calc(7px + 2vw) calc(20px + 6vw);\n\n  }\n`;\n\nconst LanguagesHeaderSection = styled.div`\n  background-color: #000032;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  min-height: 4vw;\n  padding-bottom: 3vw;\n  /* margin: 25vw 2vw; */\n  h1 {\n    font-size: calc(3px + 9vw);\n    line-height: 13vw;\n    text-align: left;\n    padding: 2vw 0 \n  }\n  p {\n    text-align: left;\n    width: 94%;\n    font-size: calc(12px + 1vw);\n    line-height: calc(25px + 3vw);\n    margin-top: 1vw;\n    padding: 0 5vw;\n    opacity: 0.8;\n  }\n`;\n\nconst LanguagePickerGrid = styled.div`\n  display: grid;\n  grid-template-columns: auto;\n  grid-template-rows: auto auto auto;\n  grid-auto-flow: column;\n  width: 100%;\n  @media only screen and (min-width: 660px) {\n  }\n  @media only screen and (min-width: 990px) {\n    grid-template-columns: auto auto;\n    grid-template-rows: auto auto;\n    grid-template-columns: 370px auto;\n  }\n`;\n\nconst LanguageOptionsColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  justify-content: flex-start;\n  align-items: center;\n  text-align: left;\n  grid-column: 1 / 1;\n  grid-row: 1 / 1;\n  padding-left: 20px;\n  margin-left: 40px;\n  margin-top: 5vw;\n  @media only screen and (min-width: 990px) {\n    /* grid-column-start: 1; */\n    /* grid-column-end: 2; */\n    height: 100%;\n    grid-row: 1 / 4;\n    /* grid-column: 1 / 2; */\n  }\n  @media only screen and (max-width: 660px) {\n    /* grid-column-start: 1; */\n    /* grid-column-end: 2; */\n  padding-left: (10px + 1vw);\n  margin-left: 0;\n    /* grid-column: 1 / 2; */\n  }\n  ul {\n    padding: 5px;\n    text-align: left;\n    justify-content: flex-start;\n    display: flex;\n    flex-direction: column;\n  }\n  li {\n    font-size: 30px;\n    padding: 10px;\n    text-align: left;\n    line-height: 58px;\n    cursor: pointer;\n    border-radius: 3rem;\n    font-family: 'e2-Raleway-Bold';\n    letter-spacing: 2px;\n    @media only screen and (min-width: 660px) {\n      /* font-size: 35px; */\n      /* grid-column: 1 / 2; */\n    }\n    @media only screen and (min-width: 990px) {\n      margin-top: 20px;\n      margin-bottom: 20px;\n      /* width: 370px; */\n      /* flex: 1; */\n      font-size: 35px;\n      line-height: 56px;\n      /* grid-column: 1 / 2; */\n      /* grid-row: 1 / 1; */\n    }\n  }\n  .li-selected {\n    background-image: linear-gradient(\n      90deg,\n      rgba(27, 189, 189, 0),\n      rgba(27, 189, 189, 0.08),\n      rgba(27, 189, 189, 0.65)\n    );\n  }\n`;\n\nconst LanguageInfoSection = styled.div`\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  justify-content: space-around;\n  align-items: center;\n  grid-column: 1 / 1;\n  grid-row: 2 / 2;\n\n  h1 {\n    font-size: calc(3px + 7.5vw);\n    line-height: 13vw;\n    text-align: center;\n    padding: 2vw 0;\n    letter-spacing: (1vw);\n  }\n  p {\n    text-align: left;\n    width: 94%;\n    font-size: calc(12px + 1vw);\n    line-height: calc(25px + 3vw);\n    margin-top: 1vw;\n    padding: 0 5vw;\n    opacity: 0.8;\n  }\n  @media only screen and (min-width: 660px) {\n  }\n  @media only screen and (min-width: 990px) {\n    grid-column: 2 / 2;\n    grid-row: 1 / 2;\n  }\n`;\n\nconst LanguageIdeScreenshotContainer = styled.div`\n  grid-row: 3 / 3;\n  padding: 5vw 5vw 10vw;\n\n  @media only screen and (min-width: 990px) {\n    grid-column: 2 / 2;\n    grid-row: 2 / 2;\n  }\n  img {\n    text-align: center;\n    height: 100%;\n  }\n`;\n\nconst BestStackForYouSection = styled.div`\n  padding: 20px;\n\n  h1 {\n    font-size: calc(3px + 9vw);\n    line-height: 13vw;\n    text-align: center;\n    padding: 2vw 0 \n  }\n  p {\n    text-align: left;\n    width: 94%;\n    font-size: calc(12px + 1vw);\n    line-height: calc(25px + 3vw);\n    margin-top: 1vw;\n    padding: 0 5vw;\n    opacity: 0.8;\n  }\n  h1 {\n    font-family: 'e2-Raleway-Extra-Bold';\n    text-align: center;\n    margin: calc(160px + 10vw) calc(16px + 1vw);\n    letter-spacing: 0.5vw;\n    line-height: calc(21px + 9vw);\n    font-size: calc(16px + 8vw);\n\n  }\n  p {\n    font-family: 'e2-Raleway';\n    text-align: center;\n    padding: calc(15px + 2vw) calc(10px + 1vw); \n    opacity: 0.8;\n    font-size: calc(7px + 3vw);\n    line-height: calc(15px + 6vw);\n    margin: 0 calc(7px + 2vw) calc(20px + 6vw);;\n\n  }\n  h2 {\n    font-size: calc(13px + 4vw);\n    line-height: 9vw;\n    text-align: left;\n    padding: 1vw 4vw 2vw; \n  }\n\n`;\n\nconst BuildYourOwnStackSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: flex-start;\n  justify-content: center;\n  min-height: 400px;\n  padding: 25px 25px;\n  @media only screen and (max-width: 990px) {\n    align-items: center;\n    flex-direction: column;\n  }\n  /* text-align: center;\n  padding: 2vw 0  */\n  h2 {\n    text-align: center;\n    font-family: 'e2-Raleway-Bold';\n    font-size: calc(10px + 4vw);\n    line-height: 13vw;\n    \n    @media only screen and (max-width: 990px) {\n      font-size: calc(10px + 9vw);\n      line-height: 13vw;\n    \n    }\n  }\n  h4 {\n    font-size: 35px;\n    margin-bottom: 40px;\n    font-family: 'e2-Raleway-Black';\n    text-align: left;\n  }\n  p {\n    text-align: left;\n    width: 100%;\n    font-size: 30px;\n    line-height: 37px;\n    letter-spacing: 2px;\n  }\n  ul {\n    padding: 1vw;\n    text-align: left;\n    justify-content: flex-start;\n    display: flex;\n    flex-direction: column;\n    /* margin-right: -74px; */\n    /* width: 100%; */\n    @media only screen and (max-width: 990px) {\n      padding: 3vw;\n\n    }\n  }\n  li {\n    /* padding: 2vw; */\n    text-align: left;\n    border-radius: 3rem;\n    font-family: 'e2-Raleway-Semi-Bold';\n    font-size: calc(15px + 1vw);\n    line-height: calc(20px + 3vw);\n    \n    @media only screen and (max-width: 990px) {\n      font-size: calc(10px + 3vw);\n      line-height: 13vw;\n      /* margin-top: 20px;\n      margin-bottom: 20px;\n      font-size: 27px;\n      line-height: 38px; */\n    }\n  }\n  /* .li-hovered {\n    background-image: linear-gradient(\n      90deg,\n      rgba(27, 189, 189, 0),\n      rgba(27, 189, 189, 0.08),\n      rgba(27, 189, 189, 0.65)\n    );\n  }\n  .li-selected {\n    background-image: linear-gradient(\n      90deg,\n      rgba(28, 220, 70, 0.3),\n      rgba(28, 220, 70, 0.05),\n      rgba(28, 220, 70, 0.65)\n    );\n  } */\n\n`;\n\nconst EngineeringStackableColumn = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 10vw calc(3px + 2vw);\n  height: 100%;\n  width: 33%;\n\n  @media only screen and (max-width: 960px) {\n    justify-content: flex-start;\n    width: 100%;\n  }\n\n  h1 {\n    font-family: 'e2-Raleway-Bold';\n    font-size: calc(15px + 2vw);\n    max-width: 95vw;\n    line-height: calc(25px + 2vw);\n    text-align: center;\n    -webkit-letter-spacing: 4px;\n    -moz-letter-spacing: 4px;\n    -ms-letter-spacing: 4px;\n    letter-spacing: 1.5px;\n    min-height: 10vw;\n    justify-content: center;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n  }\n\n  h3 {\n    font-family: 'e2-Raleway-Semi-Bold';\n    font-size: calc(15px + 2vw);\n    max-width: 95vw;\n    line-height: 5vw;\n    min-height: 5vw;\n    padding-top: 3vw;\n  }\n\n  p {\n    margin-bottom: 3vw;\n    line-height: calc(19px + 3vw);\n    text-align: justify;\n    font-size: calc(12px + 1vw);\n    letter-spacing: 1.25px;\n    font-family: 'e2-Raleway-Light';\n  }\n\n  .gatsby-image-wrapper {\n    height: auto;\n    width: 80%;\n    text-align: center;\n    max-width: 310px;\n  }\n\n  ul {\n    font-size: 24px;\n    line-height: 37px;\n    padding-top: 20px;\n  }\n\n  li {\n    font-size: calc(15px + 2vw);\n    max-width: 95vw;\n    line-height: calc(15px + 5vw);\n    min-height: 5vw;\n    padding-top: 3vw;\n    font-family: 'e2-Raleway-Semi-Bold';\n  }\n\n`;\n\nconst languageDescriptionsMap = {\n  JavaScript:\n    \"JavaScript, though mercilessly mocked by programmers across the board for years, somehow rose above and evolved to become king of the web. Its interpreted, dynamically-typed nature makes for very concise code, and it supports both class-bass OOP and extremely very functional oding styles. Literally EVERY website and web application we build is is JavaScript or some compile-to-JavaScript lanuage. Node.js is often our go-to choice for simple backend lambda functions, and it's true that more servers are deployed these days running node.js than any other runtime!\",\n  TypeScript:\n     \"Ohhh TypeScript- take all the things you like about JavaScript and add the ability to explicitly define interfaces, create enums, overload functions, etc. TypeScript gives developers syntactic sugar that _should_ make development easier to write, read, and understand. TypeScript sometimes gets a bad rap for causing annoying little errors and even sometimes slowing devlepment in the short run, but after working with Evaluates2 engineers on a project with it we believe almost anyone will learn to love TypeScript!\",\n  'Clojure / ClojureScript':\n    \"Clojure is a dialect of lisp, and it aims to frame programming as logical evaluation of functions and immutable data. It was created by Rich Hickey as way to run Lisp on the JVM (first released in 2007). The syntax is meant to be extremely terse and clear as to allow programmers to get things done correctly, quickly, and enjoyably. A version that targets the Node.js V8 runtime, referred to as ClojureScript, appeared later as a response to the growing interest in Nodejs. Here at Evaluates2 we appreciate the beauty and brevity of Clojure code, and we love building projects using this awesome language!\",\n  'Go Lang':\n    \"Go is an incredibly run-time efficient, statically-typed language that is great for server-side development. It is compiled directly to machine code and was created within Google in 2007 to improve developer productivity by replacing C++ code with something syntactically cleaner.\",\n  Rust:\n    \"Rust is an extremely fast, static typed language that emphasizes safe memory management. Created in 2006 within Mozilla to more easily develop safe systems, Rust has emerged as a very interesting, syntactically powerful language that compiiles to machine code and can run at or very near the speed of C & C++.\",\n  Swift:\n    \"Swift is a elegant and fast modern language. It is open source and was created by Apple in 2014 as a replacement for Objective-C. It's strict syntax encourages you to write clean and consistent code. While everyone knows it is THE language for native iOS development, it also has excellent performance as a server-side language.\",\n  Kotlin:\n    \"Kotlin is a syntatically beautiful, modern alternative to Java that targets JVM, JavaScript, Android, and other native platforms. It was developed by Jetbrains, officially released v1.0 in February 2016, and it is free & open-source. Kotlin is a great language to work with from the developer's perspective which is why we love building android apps and serverless functions in Kotlin!\",\n  Python:\n    \"Python, originally developed in the late 1980s as a successor to the ABC language, has evolved considerably since then including majors upgrades Python 2 in 2000 and Python 3 in 2008. It is a now a general-purpose dynamic, garbage-collected language that is great for data science, machine-learning algorithms, staticial work, and general backend api's.\",\n  Scala:\n    \"Scala is meant to be an extremely flexible alternative to Java that is both object-oriented and functional and runs on the JVM. It was created in 2004 by Martin Odersky and it a fantastic server-side language.\",\n  Haskell:\n    \"Haskell is a purely functional, statically-typed language. Developed by academic professors, it was first released in 2003 and used largely only in academia. However, we have successfully used Haskell for AWS Lambda functions, in analytics work, and other areas. If your engineering team has an interest in Haskell, we'd love to help build out test-driven Haskell services and applications.\",\n  Java:\n    \"Java, released in 1995, was very popular langague at the turn of the century as still is today. Its object-oriented principles and straightforward yet sometimes overly-verbose syntax has been enjoyed by many developers over the years, and although it's popularity has declined the JVM runtime is extremely fast for certain tasks and is still a strong choice for many software projects.\",\n  'C#':\n    \"C# was initially meant to be a general purpose C-like object-oriented programming language for the .NET framework. It was created within Microsoft and appeared in the year 2000. Although windows forms UI has fallen somewhat out of style, C# is still a popular and fine choice for server-side development.\",\n  'Ruby':\n    \"Ruby is a language that was developed for programmer productivity with and idea that making programming should be fun for programmers. It was developed in Japan in the mid 1990s and is still a popular choice for building quick prototypes and as a general purpose language.\",\n  'C / C++':\n    \"If you need to squeeze out every possible last ounce of juice from your server, C and/or C++ will give you the absolute most control. Although it isn't the most concise and readable code, C has been running in production since its origins in the early 1970s, and raw C indeed has withstood the test of time to establish itself as a valid consideration as a language even for new projects today.\",\n};\n\nconst keyPrinciplesData = {\n  'CI & Multiple Environments': {\n\n    header: 'The Use of Continuous Integration and Multiple Environments',\n    paragraph1:\n      'Each time an engineer makes a substantial change he or she will commit this change to GitHub (or the repository hosting service of your choice). Here at Evaluates2 we prefer to employ automated continuous delivery processes whereby any changes in GitHub (to specially designated branches) are detected at which point all builds are done, various automated tests are run, etc. If any step fails, all developers are notified immediately so that a fix can be made. After all commands exit successfully the continuous delivery system will then deploy these new changes directly to the staging environment.',\n    paragraph2:\n      'Here at Evaluates2 we prefer to maintain three environments when building applications: development, staging, and production. Development is connected to automated continuous deployment and should be rapidly changing. Staging is the \"pre-release\" environment where we a human can give a final check over of things before pushing to prod. Production is the live user-facing application environment! Code will finally be deployed here if all automted tests are passing and a QA engineer has given the \"ok\" for the new features / bugfixes in staging environment.'\n  },\n  'Test Driven Development': {\n    header: 'The Importance of Test Driven Development (TDD)',\n    paragraph1:\n      'Here at Evaluate2 we have several core values that we insist on when working with a client, and one of those core values is the use of test-driven development. Test Driven Development, or \"TDD\" for short, is a software development process that builds up a suite of automated tests alongside the software source code. These tests run continuously to quickly ensure proper functionality and to reduce the presence of bugs.',\n    paragraph2: 'In our opinion, testing is paramount for the future success of your project, and your future success is our main priority. By working in small red-green-refactor cycles we can be confident that our tests are passing only when they should be passing, and depending on the project we utilize a wide variety of automated tests including unit testing, end-to-end testing, UI testing, Behavior-driven testing, load testing, and smoke testing. We also prefer to take an outside-in approach where we begin with cucumber bdd tests whose step definition are mapped to UI tests (or end-to-end tests calling our routes for beckend REST server projects). We then try to make these tests pass by writing the implementation code with unit tests in a TDD fashion.'\n  },\n  'Healthy Dependencies': {\n    header: 'Keeping a Project Robust & Fresh',\n    paragraph1:\n      'Third-party libraries are great to use, but there are a few considerations that must be carefully considered. Our engineers can help guide decision making in library selection and provide support for upgrading old libraries to newer versions.',\n    paragraph2:\n      'After years of development most large project will have significat amounts of technical tebt. Maybe the engineers just couldn\\'t get those automated tests to work so they abandoned the pracice, or maybe the project works but there are tons of annoying warnings in the console. With the expertise from an Evaluates2 engineers these kinds of problems can be quickly addressed, the necessary modifications can be made, and your project can be reborn and as one that is a joy for users and developers alike.',\n  },\n};\n\nconst EngineeringPage = () => {\n  const [lastLanguageClicked, setLastLanguageClicked] = useState('');\n  const [lastLanguageHovered, setLastLanguageHovered] = useState('');\n  const [languageSelected, setLanguageSelected] = useState('');\n\n  const handleLanguageOptionHoverOver = newLanguageChoice => {\n    setLastLanguageHovered(newLanguageChoice);\n    if (lastLanguageClicked === '') {\n      setLanguageSelected(newLanguageChoice);\n    }\n  };\n\n  const handleLanguageOptionClick = (newLanguageChoice, event) => {\n    event.stopPropagation();\n    setLastLanguageClicked(newLanguageChoice);\n    setLanguageSelected(newLanguageChoice);\n  };\n\n  const pageClicked = () => {\n    setLastLanguageClicked('');\n  };\n\n  const handleLanguageOptionHoverOut = () => {\n    setLastLanguageHovered('');\n\n    if (lastLanguageClicked === '') setLanguageSelected('');\n    /*\n        Decided not to do anything here... :D\n      */\n  };\n\n  return (\n    <Global pageTitle={'Engineering'} path={'engineering'} description={'engineering'}>\n      <Layout>\n\n        <EngineeringPageContainer onClick={pageClicked}>\n        \n          <SectionHeroEngPage>\n            <h1 id=\"hero-h-eng\">\n              Engineering\n          </h1>\n            <p>Code crafted with care.\n            </p>\n          </SectionHeroEngPage>\n          {/* <ServicePageHero title=\"Engineering\" description=\"Code crafted with care.\"></ServicePageHero> */}\n          {/* <SecondServiceHero title=\"Ways we can work together\" description=\"...to get your products built.\"></SecondServiceHero> */}\n\n          <WorkTogetherSection>\n\n            <h1>\n              We Love Building Software\n            </h1>\n            <p>\n              ...so if you have great ideas, let's make them happen!\n              </p>\n          </WorkTogetherSection>\n          <StackableColumnsContainer>\n            <EngineeringStackableColumn>\n              <TechnicalAuditsImage />\n              <h1>Technical Audits</h1>\n              <p>\n                FREE introductory audit of your project's codebase & architecture!\n              </p>\n              <p>\n                Audits may cover:\n              </p>\n              <ul>\n                <li>\n                  Code Quality\n                </li>\n                <li>\n                  Automated Testing\n                </li>\n                <li>\n                  User Experience\n                </li>\n                <li>\n                  Full Platform Support\n                </li>\n                <li>\n                  Security\n                </li>\n                <li>\n                  Throughput & Scalability\n                </li>\n                <li>\n                  Data Integrity\n                </li>\n              </ul>\n            </EngineeringStackableColumn>\n            <EngineeringStackableColumn>\n              <StaffAugmentationImage />\n              <h1>Staff Augmentation</h1>\n              <p>\n                Our clients work onsite in New York City or remotely. Here at Evaluates2 we can provide a full development team or individual engineers!\n              </p>\n              <p>\n                During our initial consultantions we will work with you to determine the optimal number of Evaluates2 engineers to have on your team based on your current team and the project scope, timeline, and budget.\n              </p>\n            </EngineeringStackableColumn>\n            <EngineeringStackableColumn>\n              <ResourceEfficiencyImage />\n              <h1>Resource Efficiency</h1>\n              <p>\n                When Evaluates2 engineers are integrated into other teams they can lead by example and improve the code from every other engineer.\n              </p>\n              <p>\n                By instilling expert-level practices in things such as automated testing and deployment strategies, Evlauates2 engineers can act as an unbiased third-party to keep engineering teams honest and disciplined in their development practices.\n              </p>\n            </EngineeringStackableColumn>\n          </StackableColumnsContainer>\n\n          <LanguagesHeaderSection>\n            <h1>Languages</h1>\n            <p>\n              We're a test-obsessed team of polyglot engineers who strive to\n              always use the best tools for the job. We specialize in functional\n              programming, building beatifully interactive UIs, and putting up lean, lightning fast\n              microservices all with an outside-in TDD approach.\n            </p>\n            <p>\n              Below we have a list of our favorite programming languages, a short description of where each one shines, and a snippet of code that solves the Fizzbuzzify String challenge, and some nice unit test cases for the function!\n            </p>\n          </LanguagesHeaderSection>\n          <LanguagePickerGrid>\n            <LanguageOptionsColumn>\n              <ul>\n                <p>\n                  (Please hover over or select a choice below)\n                </p>\n                <li\n                  className={\n                    languageSelected === 'JavaScript' ? 'li-selected' : ''\n                  }\n                  onClick={event => {\n                    handleLanguageOptionClick('JavaScript', event);\n                  }}\n                  onMouseOver={() => {\n                    handleLanguageOptionHoverOver('JavaScript');\n                  }}\n                  onMouseOut={() => {\n                    handleLanguageOptionHoverOut();\n                  }}\n                >\n                  JavaScript\n              </li>\n                <li\n                  className={\n                    languageSelected === 'TypeScript' ? 'li-selected' : ''\n                  }\n                  onClick={event => {\n                    handleLanguageOptionClick('TypeScript', event);\n                  }}\n                  onMouseOver={() => {\n                    handleLanguageOptionHoverOver('TypeScript');\n                  }}\n                  onMouseOut={() => {\n                    handleLanguageOptionHoverOut();\n                  }}\n                >\n                  TypeScript\n              </li>\n                <li\n                  className={\n                    languageSelected === 'Clojure / ClojureScript'\n                      ? 'li-selected'\n                      : ''\n                  }\n                  onClick={event => {\n                    handleLanguageOptionClick('Clojure / ClojureScript', event);\n                  }}\n                  onMouseOver={() => {\n                    handleLanguageOptionHoverOver('Clojure / ClojureScript');\n                  }}\n                  onMouseOut={() => {\n                    handleLanguageOptionHoverOut();\n                  }}\n                >\n                  Clojure / ClojureScript\n              </li>\n                <li\n                  className={languageSelected === 'Go Lang' ? 'li-selected' : ''}\n                  onClick={event => {\n                    handleLanguageOptionClick('Go Lang', event);\n                  }}\n                  onMouseOver={() => {\n                    handleLanguageOptionHoverOver('Go Lang');\n                  }}\n                  onMouseOut={() => {\n                    handleLanguageOptionHoverOut();\n                  }}\n                >\n                  Go Lang\n              </li>\n                <li\n                  className={languageSelected === 'Rust' ? 'li-selected' : ''}\n                  onClick={event => {\n                    handleLanguageOptionClick('Rust', event);\n                  }}\n                  onMouseOver={() => {\n                    handleLanguageOptionHoverOver('Rust');\n                  }}\n                  onMouseOut={() => {\n                    handleLanguageOptionHoverOut();\n                  }}\n                >\n                  Rust\n              </li>\n                {/* <li\n                  className={languageSelected === 'Swift' ? 'li-selected' : ''}\n                  onClick={event => {\n                    handleLanguageOptionClick('Swift', event);\n                  }}\n                  onMouseOver={() => {\n                    handleLanguageOptionHoverOver('Swift');\n                  }}\n                  onMouseOut={() => {\n                    handleLanguageOptionHoverOut();\n                  }}\n                >\n                  Swift\n              </li> */}\n                {/* <li\n                  className={languageSelected === 'Kotlin' ? 'li-selected' : ''}\n                  onClick={event => {\n                    handleLanguageOptionClick('Kotlin', event);\n                  }}\n                  onMouseOver={() => {\n                    handleLanguageOptionHoverOver('Kotlin');\n                  }}\n                  onMouseOut={() => {\n                    handleLanguageOptionHoverOut();\n                  }}\n                >\n                  Kotlin\n              </li> */}\n                <li\n                  className={languageSelected === 'Python' ? 'li-selected' : ''}\n                  onClick={event => {\n                    handleLanguageOptionClick('Python', event);\n                  }}\n                  onMouseOver={() => {\n                    handleLanguageOptionHoverOver('Python');\n                  }}\n                  onMouseOut={() => {\n                    handleLanguageOptionHoverOut();\n                  }}\n                >\n                  Python\n              </li>\n                {/* <li\n                  className={languageSelected === 'Scala' ? 'li-selected' : ''}\n                  onClick={event => {\n                    handleLanguageOptionClick('Scala', event);\n                  }}\n                  onMouseOver={() => {\n                    handleLanguageOptionHoverOver('Scala');\n                  }}\n                  onMouseOut={() => {\n                    handleLanguageOptionHoverOut();\n                  }}\n                >\n                  Scala\n              </li> */}\n                {/* <li\n                  className={languageSelected === 'Haskell' ? 'li-selected' : ''}\n                  onClick={event => {\n                    handleLanguageOptionClick('Haskell', event);\n                  }}\n                  onMouseOver={() => {\n                    handleLanguageOptionHoverOver('Haskell');\n                  }}\n                  onMouseOut={() => {\n                    handleLanguageOptionHoverOut();\n                  }}\n                >\n                  Haskell\n              </li> */}\n                <li\n                  className={languageSelected === 'Java' ? 'li-selected' : ''}\n                  onClick={event => {\n                    handleLanguageOptionClick('Java', event);\n                  }}\n                  onMouseOver={() => {\n                    handleLanguageOptionHoverOver('Java');\n                  }}\n                  onMouseOut={() => {\n                    handleLanguageOptionHoverOut();\n                  }}\n                >\n                  Java\n              </li>\n                {/* <li\n                  className={languageSelected === 'C#' ? 'li-selected' : ''}\n                  onClick={event => {\n                    handleLanguageOptionClick('C#', event);\n                  }}\n                  onMouseOver={() => {\n                    handleLanguageOptionHoverOver('C#');\n                  }}\n                  onMouseOut={() => {\n                    handleLanguageOptionHoverOut();\n                  }}\n                >\n                  C#\n              </li> */}\n                <li\n                  className={languageSelected === 'Ruby' ? 'li-selected' : ''}\n                  onClick={event => {\n                    handleLanguageOptionClick('Ruby', event);\n                  }}\n                  onMouseOver={() => {\n                    handleLanguageOptionHoverOver('Ruby');\n                  }}\n                  onMouseOut={() => {\n                    handleLanguageOptionHoverOut();\n                  }}\n                >\n                  Ruby\n              </li>\n                {/* <li\n                  className={languageSelected === 'C / C++' ? 'li-selected' : ''}\n                  onClick={event => {\n                    handleLanguageOptionClick('C / C++', event);\n                  }}\n                  onMouseOver={() => {\n                    handleLanguageOptionHoverOver('C / C++');\n                  }}\n                  onMouseOut={() => {\n                    handleLanguageOptionHoverOut();\n                  }}\n                >\n                  C / C++\n              </li> */}\n              </ul>\n            </LanguageOptionsColumn>\n            <LanguageInfoSection>\n              <h1>\n                {lastLanguageClicked === ''\n                  ? lastLanguageHovered\n                  : lastLanguageClicked}\n              </h1>\n              <p>\n                {\n                  languageDescriptionsMap[\n                  lastLanguageClicked === ''\n                    ? lastLanguageHovered\n                    : lastLanguageClicked\n                  ]\n                }\n              </p>\n            </LanguageInfoSection>\n\n            <LanguageIdeScreenshotContainer>\n              {languageSelected === 'JavaScript' && <JsFizzbuzzifiedStringImage />}\n              {languageSelected === 'TypeScript' && <TypeScriptFizzbuzzifiedStringImage />}\n              {languageSelected === 'Clojure / ClojureScript' && <ClojureFizzbuzzifiedStringImage />}\n              {languageSelected === 'Go Lang' && <GoFizzbuzzifiedStringImage />}\n              {languageSelected === 'Rust' && <RustFizzbuzzifiedStringImage />}\n              {languageSelected === 'Python' && <PythonFizzbuzzifiedStringImage />}\n              {languageSelected === 'Java' && <JavaFizzbuzzifiedStringImage />}\n              {languageSelected === 'Ruby' && <RubyFizzbuzzifiedStringImage />}\n              {/* TODO - Add screenshots for other languages */}\n            </LanguageIdeScreenshotContainer>\n          </LanguagePickerGrid>\n\n          <BestStackForYouSection>\n            <h1>We'll Use The Right Tech For YOUR Business.</h1>\n            <h2>Choose Your Own Tech Stack Trio!</h2>\n            <p>\n              The tech stack for any of our software projects generally includes a\n              front-end, back-end, and a database. There are many options from\n              which to choose, and if you are at all unsure we can help you decide\n              which combination should fit best for your team and product. Of\n              course these are not fully exhaustive lists of all possible front-ends,\n              backends, and databases, but these are the core competencies of the\n              current Evaluates2 team!\n          </p>\n          </BestStackForYouSection>\n          <BuildYourOwnStackSection>\n            <EngineeringStackableColumn>\n              <h2>Frontends</h2>\n              <ul>\n                <li>React (JavaScript or TypeScript)</li>\n                <li>Angular (TypeScript)</li>\n                <li>Vue (JavaScript)</li>\n                <li>Reagent (ClojureScript)</li>\n                <li>Vue (JavaScript)</li>\n                <li>Elm</li>\n                <li>Rocket (Rust)</li>\n                <li>NativeScript</li>\n                <li>Native Ios (Swift)</li>\n                <li>Native Android (Kotlin)</li>\n                <li>Ruby on Rails</li>\n              </ul>\n            </EngineeringStackableColumn>\n            <EngineeringStackableColumn>\n              <h2>Backends</h2>\n              <ul>\n                <li>NodeJS (Express + JavaScript)</li>\n                <li>NodeJS (Express + TypeScript)</li>\n                <li>NodeJS (Websockets)</li>\n                <br/>\n                <li>TypeScript (Express + JavaScript)</li>\n                <li>TypeScript (Express + TypeScript)</li>\n                <li>TypeScript (Websockets)</li>\n                <br/>\n                <li>JVM Clojure (Pedastal or Ring)</li>\n                <li>JVM Clojure (Serverless)</li>\n                <br />\n                <li>ClojureScript (Serverless)</li>\n                <li>ClojureScript (Websockets)</li>\n                <br />\n                <li>Go (Revel)</li>\n                <li>Go (Serverless)</li>\n                <li>Go (Websockets)</li>\n                <br />\n                <li>Java (Spring / Spark)</li>\n                <li>Java (Serverless Java)</li>\n                <li>Java (Websocket Streams)</li>\n                <br />\n                <li>Python (Python Flask / Django)</li>\n                <li>Python (Serverless Python)</li>\n                <br />\n                <li>C# (with NancyFx)</li>\n                <li>C# (Serverless C#)</li>\n              </ul>\n            </EngineeringStackableColumn>\n            <EngineeringStackableColumn>\n              <h2>Databases</h2>\n              <ul>\n                <h4>(NoSQL)</h4>\n                <li>MongoDB</li>\n                <li>DynamoDB</li>\n                <li>Redis</li>\n                <li>Datomic</li>\n                <li>Neo4J</li>\n                <li>CosmosDB</li>\n                <li>Cassandra</li>\n                <h4>(Relational)</h4>\n                <li>Postgres</li>\n                <li>Google BigTable</li>\n                <li>Amazon Aurora</li>\n                <li>MySQL</li>\n              </ul>\n            </EngineeringStackableColumn>\n          </BuildYourOwnStackSection>\n\n          <KeyPrinciplesHeader headerText=\"Continuous Integration & Multiple Environments\"></KeyPrinciplesHeader>\n          <KeyPrinciplesInfoBlock data={keyPrinciplesData['CI & Multiple Environments']}></KeyPrinciplesInfoBlock>\n\n          <KeyPrinciplesHeader headerText=\"Test Driven Development\"></KeyPrinciplesHeader>\n          <KeyPrinciplesInfoBlock data={keyPrinciplesData['Test Driven Development']}></KeyPrinciplesInfoBlock>\n\n          <KeyPrinciplesHeader headerText=\"Healthy Dependencies\"></KeyPrinciplesHeader>\n          <KeyPrinciplesInfoBlock data={keyPrinciplesData['Healthy Dependencies']}></KeyPrinciplesInfoBlock>\n\n          <ChangeGearsBlock headerText='Find out more about how we work...' linkText='Product Management' linkTo='/product-management'></ChangeGearsBlock>\n          <ReadyToGetStartedSection>\n            <h1>Ready to partner with us?</h1>\n            <Link to=\"/contact\">Contact us today!</Link>\n          </ReadyToGetStartedSection>\n          <br />\n          <br />\n          <br />\n          <br />\n          <JoinOurTeamCornerBtn />\n\n        </EngineeringPageContainer>\n      </Layout>\n    </Global>\n  );\n};\nexport default EngineeringPage;","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.app/gatsby-image\n * - `StaticQuery`: https://gatsby.app/staticquery\n */\n\nconst StaffAugmentationImage = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(relativePath: { eq: \"staff-augmentation.png\" }) {\n          childImageSharp {\n            fluid(maxWidth: 300) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Img fluid={data.placeholderImage.childImageSharp.fluid} />}\n  />\n);\nexport default StaffAugmentationImage;\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.app/gatsby-image\n * - `StaticQuery`: https://gatsby.app/staticquery\n */\n\nconst ResourceEfficiencyImage = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(relativePath: { eq: \"resource-efficiency.png\" }) {\n          childImageSharp {\n            fluid(maxWidth: 300) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Img fluid={data.placeholderImage.childImageSharp.fluid} />}\n  />\n);\nexport default ResourceEfficiencyImage;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { Link } from 'gatsby';\n\nconst StyledChangeGearsBlock = styled.div`\n  text-decoration: none;\n  position: relative;\n  z-index: 5;\n  display: flex;\n  padding: 15vh 100px 1vh;\n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center;\n  padding-right: 0;\n  -webkit-box-pack: end;\n  -webkit-justify-content: flex-end;\n  -ms-flex-pack: end;\n  justify-content: flex-end;\n  width: 100%;\n  flex-direction: column;\n  align-items: flex-end;\n\n  h2 {\n    display: flex;\n    flex: 1;\n    width: 82vw;\n    padding-right: 20px;\n    padding-left: 7vw;\n    -webkit-box-pack: start;\n    -webkit-justify-content: flex-start;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n    -webkit-box-align: center;\n    -webkit-align-items: center;\n    -ms-flex-align: center;\n    align-items: center;\n    color: #fff;\n    margin-bottom: 0;\n    font-size: calc(20px + 3vw);\n    line-height: calc(35px + 3vw);;\n    font-family: 'e2-Raleway-Bold';\n    letter-spacing: 1px;\n    margin: calc(20px + 5vw) auto calc(10px + 2vw) 20px;\n  }\n\n  a {\n    display: flex;\n    flex-direction: row;\n    flex: 1;\n    justify-content: flex-start;\n    margin: 0px 0 50px calc(14px + 9vw);\n    min-height: 5vw;\n    /* position: absolute; */\n\n    @keyframes rainbow_animation {\n      0% {\n        background-position: 0 0;\n      }\n      \n      100% {\n        background-position: 100% 0;\n      }\n     \n    }\n\n\n    .rainbow {\n      position: absolute;\n    }\n    \n    h3.rainbow_text_animated {\n      background: linear-gradient(\n        to left,\n        #66edff,\n        #bf2bf0,\n        #00ff00,\n        #ff3399,\n        #f02b52,\n        #fff457,\n        #12a8ff,\n        #ffa012,\n        #ff8cf5,\n        #2fba5b\n      );\n      -webkit-background-clip: text;\n      background-clip: text;\n      background-size: 1500% 300%;\n      color: #fff;\n      transition: all 0.5s ease;\n      font-size: calc(12px + 2vw);\n      padding-left: 0px;\n\n      :hover {\n        /* padding: 5px 5px 5px 20px; */\n        font-size: calc(14px + 2vw);\n        padding-left: 20px;\n        /* line-height: 28px; */\n        color: rgba(0, 0, 0, 0);\n        animation: rainbow_animation 2s cubic-bezier(0.25, 0.25, 0.25, .25) infinite;\n      }\n    }\n\n    /* background-image: linear-gradient(90deg,#000032,#0ff);\n  min-height: 425px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly; \n  width: 100%;\n  padding: 10vh 10vw;\n  \n  \n  h1.header {\n    font-size: 80px;\n    line-height: 100px;\n    font-family: 'e2-Raleway-Extra-Bold';\n    letter-spacing: 1px;\n    text-align: left;\n  } */\n\n    div {\n      #shadowBox {\n        background-color: rgb(0, 0, 0);\n        /* Fallback color */\n        background-color: rgba(0, 0, 0, 0);\n        /* Black w/opacity/see-through */\n        /* border: 3px solid; */\n      }\n    }\n  }\n`;\n\nconst RainbowBlock = styled.div`\n  background-image: linear-gradient(238deg, #0ff, #f0f);\n\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n\n`;\n\nconst ChangeGearsBlock = ({ headerText, linkText, linkTo }) => (\n  <StyledChangeGearsBlock>\n    <RainbowBlock>\n      <h2>{headerText}</h2>\n      <Link to={linkTo}>\n        <div id=\"shadowBox\">\n          <h3 className=\"rainbow rainbow_text_animated\">\n            {linkText}&nbsp;&nbsp;→\n          </h3>\n        </div>\n      </Link>\n    </RainbowBlock>\n    {/* <h1 className='header'>{headerText}</h1> */}\n  </StyledChangeGearsBlock>\n);\n\nexport default ChangeGearsBlock;\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.app/gatsby-image\n * - `StaticQuery`: https://gatsby.app/staticquery\n */\n\nconst TechnicalAuditsImage = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(relativePath: { eq: \"technical-audits.png\" }) {\n          childImageSharp {\n            fluid(maxWidth: 300) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Img fluid={data.placeholderImage.childImageSharp.fluid} />}\n  />\n);\nexport default TechnicalAuditsImage;\n","import styled from '@emotion/styled';\n\nconst StackableColumnsContainer = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  padding: 0 20px 80px;\n\n  @media only screen and (max-width: 900px) {\n    font-size: 18px;\n    line-height: 31px;\n    flex-direction: column;\n  }\n\n  p {\n    font-size: 20px;\n    line-height: 34px;\n\n    @media only screen and (max-width: 900px) {\n      font-size: 19px;\n      line-height: 32px;\n    }\n  }\n`;\n\nexport default StackableColumnsContainer;\n","import styled from '@emotion/styled';\n\nconst ReadyToGetStartedSection = styled.div`\n  \n  padding: calc(40px + 20vw) calc(20px + 2vw);\n  \n  h1 {\n    font-family: 'e2-Raleway-Black-Italic';\n    font-size: calc(20px + 5vw);\n    line-height: calc(30px + 9vw);\n    margin: calc(5px + 1vw);\n    text-align: center;\n  }\n\n  a {\n    cursor: pointer;\n    font-family: 'e2-Raleway-Semi-Bold-Italic';\n    display: flex;\n    justify-content: center;\n    padding-top: calc(10px + 6vw);\n    font-size: calc(10px + 3vw);\n    line-height: calc(15px + 4.5vw);\n    justify-content: center;\n    align-items: center;\n    text-decoration: underline;\n    letter-spacing: 1.5px;\n  }\n`;\n\nexport default ReadyToGetStartedSection;","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst StyledPrinciplesHeader = styled.div`\n\n  background-image: linear-gradient(90deg,#000032,#0ff);\n  min-height: 60vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly; \n  width: 100%;\n  padding: 13vw 10vw;\n  \n  h1.header {\n    font-size: calc(10px + 6vw);\n    line-height: calc(10px + 11vw);\n    font-family: 'e2-Raleway-Extra-Bold';\n    letter-spacing: 1px;\n    text-align: left;\n  }\n\n`;\n\nconst KeyPrinciplesHeader = ({headerText}) => (\n  <StyledPrinciplesHeader>\n    <h1 className='header'>{headerText}</h1>\n  </StyledPrinciplesHeader>\n);\n\nexport default KeyPrinciplesHeader;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst StyledPrinciplesInfoBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly; \n  width: 100%;\n  padding: 6vw 10vw;\n  \n  h1.header {\n    font-size: calc(10px + 3vw);\n    line-height: calc(15px + 4.5vw);\n    margin: 3vw 0;\n    font-family: 'e2-Raleway-Semi-Bold';\n    letter-spacing: 1px;\n    text-align: left;\n    /* font-size: 27px; */\n    /* line-height: 60px; */\n  }\n  \n  p {\n    font-size: calc(10px + 1vw);\n    line-height: calc(16px + 3vw);\n    opacity: 0.8;\n    font-family: 'e2-Raleway';\n    color: #DDDDDD;\n  }\n\n`;\n\nconst KeyPrinciplesInfoBlock = ({data}) => (\n  <StyledPrinciplesInfoBlock>\n    <h1 className='header'>{data.header ? data.header : ''}</h1>\n    <p>{data.paragraph1 ? data.paragraph1 : ''}</p>\n    <p>{data.paragraph2 ? data.paragraph2 : ''}</p>\n\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n  </StyledPrinciplesInfoBlock>\n);\n\nexport default KeyPrinciplesInfoBlock;\n"],"sourceRoot":""}